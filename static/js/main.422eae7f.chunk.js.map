{"version":3,"sources":["components/Navbar/index.js","components/LoadingSpinner/index.js","components/formularios/JsonForm.js","components/hooks/useFetch.js","components/formularios/reducer.js","components/formularios/actionTypes.js","components/formularios/index.js","components/formularios/actions.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","styledAppBar","backgroundColor","logo","maxWidth","Navbar","classes","AppBar","className","Toolbar","src","alt","theme","root","display","marginLeft","spacing","CircularIndeterminate","CircularProgress","size","errorMessageStyles","styledWarning","props","color","visible","jsonFormStyles","styledRadioGroup","flexDirection","styledTextField","margin","loadingContainer","justifyContent","alignItems","minHeight","ErrorMessage","JsonForm","data","error","isLoading","setFormAnswer","setCommentAnswer","formError","handleChange","event","target","value","length","map","pregunta","indexP","key","idpregunta","FormLabel","component","RadioGroup","defaultValue","idrespuesta","respuesta","onChange","respuestas","FormControlLabel","control","Radio","label","includes","TextField","fullWidth","multiline","rows","comentario","variant","useFetch","url","useState","setData","setIsLoading","isError","setIsError","useEffect","a","async","fetch","response","json","fetchData","initialState","preguntas","qtyPreguntas","isOpenDialog","formCompleted","formSubmitted","reducer","state","action","type","payload","split","indexPregunta","idRespuesta","errors","forEach","Number","push","formContainer","height","Formulario","useReducer","dispatch","setIsOpen","status","Button","onClick","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","dividers","FormControl","val","index","e","DialogActions","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.422eae7f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  styledAppBar: {\r\n    backgroundColor: \"#0070c0\"\r\n  },\r\n  logo: {\r\n    maxWidth: 60\r\n  }\r\n});\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.styledAppBar}>\r\n      <Toolbar>\r\n        <img src=\"logo.png\" alt=\"logo\" className={classes.logo} />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CircularIndeterminate() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress size={60} />\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport LoadingSpinner from \"../LoadingSpinner\";\r\n\r\nconst errorMessageStyles = makeStyles({\r\n  styledWarning: props => ({\r\n    color: \"#f44336\",\r\n    display: props.visible ? \"block\" : \"none\"\r\n  })\r\n});\r\n\r\nconst jsonFormStyles = makeStyles({\r\n  styledRadioGroup: {\r\n    flexDirection: \"row !important\"\r\n  },\r\n  styledTextField: {\r\n    margin: \"10px 0 20px !important\"\r\n  },\r\n  loadingContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    minHeight: \"65vh\"\r\n  }\r\n});\r\n\r\nconst ErrorMessage = props => {\r\n  const classes = errorMessageStyles(props);\r\n  return (\r\n    <div className={classes.styledWarning}>Debe seleccionar una opci√≥n</div>\r\n  );\r\n};\r\n\r\nconst JsonForm = ({\r\n  data,\r\n  error,\r\n  isLoading,\r\n  setFormAnswer,\r\n  setCommentAnswer,\r\n  formError\r\n}) => {\r\n  const classes = jsonFormStyles();\r\n\r\n  const handleChange = event => {\r\n    setFormAnswer(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div className={classes.loadingContainer}>\r\n          <LoadingSpinner />\r\n        </div>\r\n      ) : !error && data.length ? (\r\n        data.map((pregunta, indexP) => (\r\n          <div key={pregunta.idpregunta}>\r\n            <FormLabel component=\"legend\">{pregunta.pregunta}</FormLabel>\r\n            <RadioGroup\r\n              className={classes.styledRadioGroup}\r\n              defaultValue={`${indexP}-${pregunta.idrespuesta}-${pregunta.respuesta}`}\r\n              onChange={handleChange}>\r\n              {pregunta.respuestas.length &&\r\n                pregunta.respuestas.map(respuesta => (\r\n                  <FormControlLabel\r\n                    key={respuesta.idrespuesta}\r\n                    value={`${indexP}-${respuesta.idrespuesta}-${respuesta.respuesta}`}\r\n                    control={<Radio color=\"primary\" />}\r\n                    label={respuesta.respuesta}\r\n                  />\r\n                ))}\r\n            </RadioGroup>\r\n            <ErrorMessage visible={formError.includes(pregunta.idpregunta)} />\r\n            <TextField\r\n              className={classes.styledTextField}\r\n              fullWidth\r\n              label=\"Comentario\"\r\n              multiline\r\n              rows=\"4\"\r\n              onChange={setCommentAnswer(indexP)}\r\n              defaultValue={\r\n                pregunta.idrespuesta !== 0 &&\r\n                pregunta.comentario !== `Falta Pregunta ${indexP + 1}`\r\n                  ? pregunta.comentario\r\n                  : \"\"\r\n              }\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <h2>Disculpe, ha ocurrido un error</h2>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JsonForm;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = url => {\r\n  const [data, setData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  // Just pass the variables that changes in each new fetch requisition\r\n  const fetchData = async url => {\r\n    setIsError(false);\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setData(data);\r\n    } catch (error) {\r\n      setIsError(true);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(url);\r\n  }, [url]);\r\n\r\n  return { data, isLoading, isError };\r\n};\r\n","import {\r\n  SET_JSON_FORM,\r\n  SET_ANSWER,\r\n  SET_COMMENT,\r\n  SUBMIT_FORM,\r\n  SET_IS_OPEN_DIALOG\r\n} from \"./actionTypes\";\r\n\r\nexport const initialState = {\r\n  preguntas: [],\r\n  qtyPreguntas: 0,\r\n  error: [],\r\n  isOpenDialog: false,\r\n  formCompleted: false,\r\n  formSubmitted: false\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n  const preguntas = state.preguntas;\r\n  switch (action.type) {\r\n    case SET_IS_OPEN_DIALOG:\r\n      return { ...state, isOpenDialog: action.payload, error: [] };\r\n    case SET_JSON_FORM:\r\n      return {\r\n        ...state,\r\n        preguntas: action.payload,\r\n        qtyPreguntas: action.payload.length\r\n      };\r\n    case SET_ANSWER:\r\n      const payload = action.payload.split(\"-\");\r\n      const indexPregunta = payload[0];\r\n      const idRespuesta = payload[1];\r\n      const respuesta = payload[2];\r\n\r\n      preguntas[indexPregunta][\"idrespuesta\"] = idRespuesta;\r\n      preguntas[indexPregunta][\"respuesta\"] = respuesta;\r\n\r\n      return { ...state, preguntas: preguntas };\r\n    case SET_COMMENT:\r\n      preguntas[action.payload][\"comentario\"] = action.event;\r\n      return { ...state, preguntas: preguntas };\r\n    case SUBMIT_FORM:\r\n      const errors = [];\r\n      preguntas.forEach(pregunta => {\r\n        if (Number(pregunta.idrespuesta) === 0)\r\n          errors.push(pregunta.idpregunta);\r\n      });\r\n\r\n      if (errors.length) {\r\n        return { ...state, error: errors };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        error: errors,\r\n        isOpenDialog: false,\r\n        formCompleted: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const SET_JSON_FORM = \"SET_JSON_FORM\";\nexport const SET_ANSWER = \"SET_ANSWER\";\nexport const SET_COMMENT = \"SET_COMMENT\";\nexport const SUBMIT_FORM = \"SUBMIT_FORM\";\nexport const SET_IS_OPEN_DIALOG = \"SET_IS_OPEN_DIALOG\";","import React, { useEffect, useReducer } from \"react\";\r\nimport JsonForm from \"./JsonForm\";\r\nimport { useFetch } from \"../hooks/useFetch\";\r\nimport {\r\n  setJsonForm,\r\n  setAnswer,\r\n  setComment,\r\n  submitForm,\r\n  setIsOpenDialog\r\n} from \"./actions\";\r\nimport { initialState, reducer } from \"./reducer\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  formContainer: {\r\n    height: \"90vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  }\r\n});\r\n\r\nconst Formulario = () => {\r\n  const classes = useStyles();\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const url =\r\n    \"https://f2020.azurewebsites.net/api/FaroFormularioBase?code=5mWvvpNVz/at91R4awZb7g/rSfVWeHbMSARrVFbEdZWtC2fWBaGtnQ==&id=conectividad\";\r\n\r\n  const { data, isLoading, isError } = useFetch(url);\r\n\r\n  const setIsOpen = status => {\r\n    dispatch(setIsOpenDialog(status));\r\n  };\r\n\r\n  const setFormAnswer = val => {\r\n    dispatch(setAnswer(val));\r\n  };\r\n\r\n  const setCommentAnswer = index => e => {\r\n    dispatch(setComment(index, e.target.value));\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    dispatch(submitForm());\r\n  };\r\n\r\n  useEffect(() => {\r\n    !isLoading && data && dispatch(setJsonForm(data[0].preguntas));\r\n  }, [data, isLoading]);\r\n\r\n  return (\r\n    <div className={classes.formContainer}>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={() => setIsOpen(true)}>\r\n        Formulario\r\n      </Button>\r\n      <Dialog\r\n        fullWidth\r\n        maxWidth=\"md\"\r\n        open={state.isOpenDialog}\r\n        onClose={() => setIsOpen(false)}\r\n        aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Formulario</DialogTitle>\r\n        <DialogContent dividers>\r\n          <FormControl fullWidth component=\"fieldset\">\r\n            <JsonForm\r\n              error={isError}\r\n              isLoading={isLoading}\r\n              formError={state.error}\r\n              setFormAnswer={setFormAnswer}\r\n              data={state.preguntas && state.preguntas}\r\n              setCommentAnswer={setCommentAnswer}\r\n            />\r\n          </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsOpen(false)} color=\"primary\">\r\n            Cancelar\r\n          </Button>\r\n          <Button onClick={onSubmit} color=\"primary\">\r\n            Enviar\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import {\r\n  SET_JSON_FORM,\r\n  SET_ANSWER,\r\n  SET_COMMENT,\r\n  SUBMIT_FORM,\r\n  SET_IS_OPEN_DIALOG\r\n} from \"./actionTypes\";\r\n\r\nexport const setJsonForm = payload => ({\r\n  payload,\r\n  type: SET_JSON_FORM\r\n});\r\n\r\nexport const setAnswer = payload => ({\r\n  payload,\r\n  type: SET_ANSWER\r\n});\r\n\r\nexport const setComment = (payload, event) => ({\r\n  payload,\r\n  event,\r\n  type: SET_COMMENT\r\n});\r\n\r\nexport const submitForm = () => ({\r\n  type: SUBMIT_FORM\r\n});\r\n\r\nexport const setIsOpenDialog = payload => ({\r\n  payload,\r\n  type: SET_IS_OPEN_DIALOG\r\n});\r\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Formulario from \"./components/formularios\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Navbar />\n      <Formulario />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}